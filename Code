import tkinter as tk
from tkinter import Entry, Label, Button, messagebox
import requests
from PIL import Image, ImageTk

class Weather(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        # Widgets
        self.what_cityentry = tk.Entry(self, font=("Helvetica", 16))
        self.search_type_var = tk.StringVar(value="City")  # Default search type is City
        city_entry_label = tk.Label(self, text='Search Type:', font=('Helvetica', 30))
        search_type_menu = tk.OptionMenu(self, self.search_type_var, "City", "Zip Code")
        enter_button = tk.Button(self, text="Enter", font=("Helvetica", 16), command=self.search)
        self.weather_image_label = tk.Label(self)
        
        # Placement
        city_entry_label.grid(row=0, column=0, columnspan=3, sticky="news", pady=10)
        search_type_menu.grid(row=0, column=3, pady=10)
        self.what_cityentry.grid(row=1, column=1, pady=10)
        enter_button.grid(row=2, column=0, columnspan=3, pady=10)
        self.weather_image_label.grid(row=3, column=0, columnspan=3, pady=10)

    def search(self):
        search_type = self.search_type_var.get()
        location = self.what_cityentry.get()

        if search_type == "City":
            url = f'http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}'
        elif search_type == "Zip Code":
            url = f'http://api.openweathermap.org/data/2.5/weather?zip={location}&appid={api_key}'
        else:
            messagebox.showerror('Error', 'Invalid search type')
            return

        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            temp = data['main']['temp']
            desc = data['weather'][0]['description']
            city_name = data['name'] if 'name' in data else ''
            
            messagebox.showinfo('Weather Info', f'City: {city_name}\nTemperature: {round((temp - 273.15) * 9/5 + 32)} F\nDescription: {desc}')

            # Update weather image based on weather condition (replace with your own images)
            weather_condition = data['weather'][0]['main'].lower()
            image_path = self.get_weather_image_path(weather_condition)
            self.update_weather_image(image_path)
        else:
            messagebox.showerror('Error', 'Error fetching weather data')

    def get_weather_image_path(self, weather_condition):
        # Replace these placeholder paths with your actual image paths
        if 'clear' in weather_condition:
            return '/Users/amarewoods/Python-Test/Clear.png'
        elif 'cloud' in weather_condition:
            return '/Users/amarewoods/Python-Test/brokencloud.png'
        elif 'rain' in weather_condition:
            return '/Users/amarewoods/Python-Test/Rain.png'
        else:
            return '/Users/amarewoods/Python-Test/Clear.png'

    def update_weather_image(self, image_path):
        # Resize the image to fit the label
        image = Image.open(image_path)
        image = image.resize((150, 150), Image.BICUBIC)
        photo = ImageTk.PhotoImage(image)

        # Update the label with the new image
        self.weather_image_label.configure(image=photo)
        self.weather_image_label.image = photo


# Constants
api_key = '1e628b3c7e677a77980231943a091d45'

# Main application
window = tk.Tk()
window.title('Weather App')

#Icon
image_icon = tk.PhotoImage(file='/Users/amarewoods/Python-Test/WeatherAppICon.png')
window.iconphoto(False, image_icon)
label = tk.Label(window, text='Weather App')
window.geometry('340x500')
window.configure(bg='#333333')
frame = Weather(window, None)
frame.pack()
window.mainloop()



